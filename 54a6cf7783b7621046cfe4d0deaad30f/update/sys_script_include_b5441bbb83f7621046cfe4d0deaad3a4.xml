<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.DocuGenLLMClientUtils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>DocuGenLLMClientUtils</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[/**
 * DocuGenLLMClientUtils with Code Quality Metrics and Feedback Loop
 * Generates documentation, annotations, maintenance suggestions, and code reviews
 * Uses DocuGenLLMPromptUtilities for prompt construction, DocuGenLLMRequestUtils for API calls,
 * and DocuGenLLMWriteUtils for storage operations
 * Designed for ServiceNow scripts (Client Scripts, Script Includes, Scheduled Scripts)
 */

var DocuGenLLMClientUtils = Class.create();
DocuGenLLMClientUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
    initialize: function(model) {
        let ifLayer = null;
        const docuGenModel = new GlideRecord('u_docugen_models');
        if (!model) {
            ifLayer = 'not model';
            docuGenModel.addQuery('u_default', true);
        } else if (model.match(/[a-z0-9]{32}/)) {
            ifLayer = 'match sys_id';
            docuGenModel.addQuery('sys_id', model);
        } else {
            ifLayer = 'model name';
            docuGenModel.addQuery('u_name', model);
        }
        docuGenModel.query();

        if (!docuGenModel.next()) {
            gs.error(`[DocuGenLLMClientUtils.initialize] Error: Model ${model} not found in the u_docugen_models table. If Layer: ${ifLayer}`);
            throw new Error(`[DocuGenLLMClientUtils.initialize] Error: Model ${model} not found in the u_docugen_models table.`);
        } else {
            this.LLMENDPOINT = docuGenModel.u_api_endpoint;
            this.APIKEY = docuGenModel.u_api_key.getDecryptedValue();
            this.APIPROMPT = docuGenModel.u_prompt;
            this.PROMPTATTRIBUTE = docuGenModel.u_prompt_text_attribute;
            this.MODEL = docuGenModel.u_model.toString();
            this.MODEL_SYS_ID = docuGenModel.getUniqueValue();
        }

        this.LOG_SOURCE = 'DocuGenLLM';
        this.REQUEST_TYPE = '';
        this.LOG_MESSAGE = '';
        this.LOG_LEVEL = 0;
        this.DOCS_TABLE = 'u_docugen_code_docs';
        this.SUGGESTIONS_TABLE = 'u_docugen_suggestions';
        this.FEEDBACK_TABLE = 'u_docugen_feedback';
        this.DEBUG = false;

        // Initialize Utilities
        this.promptUtils = new DocuGenLLMPromptUtils();
        this.requestUtils = new DocuGenLLMRequestUtils({
            LLMENDPOINT: this.LLMENDPOINT,
            APIKEY: this.APIKEY,
            APIPROMPT: this.APIPROMPT,
            PROMPTATTRIBUTE: this.PROMPTATTRIBUTE,
            MODEL: this.MODEL
        });
        this.writeUtils = new DocuGenLLMWriteUtils({
            DOCS_TABLE: this.DOCS_TABLE,
            SUGGESTIONS_TABLE: this.SUGGESTIONS_TABLE,
            MODEL_SYS_ID: this.MODEL_SYS_ID
        });
    },

    STATUS: {
        SUCCESS: 200,
        BAD_REQUEST: 400,
        DEBUG: 999
    },

    generateAnnotation: function(recordSysId, recordDisplayValue, tableName) {
        this.REQUEST_TYPE = 'annotation';
        let responseArr = [];

        try {
            const prompt = this.promptUtils._buildAnnotationPrompt(recordSysId, tableName);
            const jsonFormattedPrompt = this.requestUtils._formatRequest(prompt);

            if (this.DEBUG) responseArr.push(jsonFormattedPrompt);

            this.requestUtils.REQUEST_TYPE = this.REQUEST_TYPE;
            const response = this.requestUtils._callLLMAPI(jsonFormattedPrompt);
            if (this.DEBUG) responseArr.push(response);

            const annotation = this.requestUtils._parseLLMAnnotationResponse(response);
            if (this.DEBUG) responseArr.push(annotation);

            const result = this.writeUtils._storeAnnotation(annotation, recordSysId, tableName, recordDisplayValue);
            if (this.DEBUG) responseArr.push(result);

            if (this.DEBUG) return this.writeUtils._createResponse(this.STATUS.DEBUG, responseArr);

            this.LOG_MESSAGE = JSON.stringify(response);
            this.requestUtils.LOG_MESSAGE = this.LOG_MESSAGE;
            this.requestUtils._writeUsageLog();
            return this.writeUtils._createResponse(this.STATUS.SUCCESS, result);
        } catch (e) {
            this.LOG_MESSAGE = `[DocuGenLLM.generateAnnotation] Error: ${e}`;
            this.requestUtils.LOG_MESSAGE = this.LOG_MESSAGE;
            this.requestUtils.REQUEST_TYPE = this.REQUEST_TYPE;
            this.requestUtils._writeUsageLog();
            return this.writeUtils._createResponse(this.STATUS.BAD_REQUEST, `[DocuGenLLM.generateAnnotation]: ${e}`);
        }
    },

    generateDocumentation: function(recordSysId, recordDisplayValue, tableName) {
        this.REQUEST_TYPE = 'documentation';
        let responseArr = [];

        try {
            const prompt = this.promptUtils._buildDocumentationPrompt(recordSysId, tableName);
            const jsonFormattedPrompt = this.requestUtils._formatRequest(prompt);

            if (this.DEBUG) responseArr.push(jsonFormattedPrompt);

            this.requestUtils.REQUEST_TYPE = this.REQUEST_TYPE;
            const response = this.requestUtils._callLLMAPI(jsonFormattedPrompt);
            if (this.DEBUG) responseArr.push(response);

            const documentation = this.requestUtils._parseLLMDocumentResponse(response);
            if (this.DEBUG) responseArr.push(documentation);

            const result = this.writeUtils._storeDocumentation(documentation, recordSysId, tableName, recordDisplayValue);
            if (this.DEBUG) responseArr.push(result);

            if (this.DEBUG) return this.writeUtils._createResponse(this.STATUS.DEBUG, responseArr);

            this.LOG_MESSAGE = JSON.stringify(response);
            this.requestUtils.LOG_MESSAGE = this.LOG_MESSAGE;
            this.requestUtils._writeUsageLog();
            return this.writeUtils._createResponse(this.STATUS.SUCCESS, result);
        } catch (e) {
            this.LOG_MESSAGE = `[DocuGenLLM.generateDocumentation] Error: ${e}`;
            this.requestUtils.LOG_MESSAGE = this.LOG_MESSAGE;
            this.requestUtils.REQUEST_TYPE = this.REQUEST_TYPE;
            this.requestUtils._writeUsageLog();
            return this.writeUtils._createResponse(this.STATUS.BAD_REQUEST, `[DocuGenLLM.generateDocumentation]: ${e}`);
        }
    },

    generateTableDocumentation: function(recordSysId, recordDisplayValue, tableName) {
        this.REQUEST_TYPE = 'table documentation';
        let responseArr = [];

        try {
            const prompt = this.promptUtils._buildTableDocumentationPrompt(recordSysId, tableName);
            const jsonFormattedPrompt = this.requestUtils._formatRequest(prompt);

            if (this.DEBUG) responseArr.push(jsonFormattedPrompt);

            this.requestUtils.REQUEST_TYPE = this.REQUEST_TYPE;
            const response = this.requestUtils._callLLMAPI(jsonFormattedPrompt);
            if (this.DEBUG) responseArr.push(response);

            const documentation = this.requestUtils._parseLLMDocumentResponse(response);
            if (this.DEBUG) responseArr.push(documentation);

            const result = this.writeUtils._storeDocumentation(documentation, recordSysId, tableName, `Table: ${recordDisplayValue}`);
            if (this.DEBUG) responseArr.push(result);

            if (this.DEBUG) return this.writeUtils._createResponse(this.STATUS.DEBUG, responseArr);

            this.LOG_MESSAGE = JSON.stringify(response);
            this.requestUtils.LOG_MESSAGE = this.LOG_MESSAGE;
            this.requestUtils._writeUsageLog();
            return this.writeUtils._createResponse(this.STATUS.SUCCESS, result);
        } catch (e) {
            this.LOG_MESSAGE = `[DocuGenLLM.generateTableDocumentation] Error: ${e}`;
            this.requestUtils.LOG_MESSAGE = this.LOG_MESSAGE;
            this.requestUtils.REQUEST_TYPE = this.REQUEST_TYPE;
            this.requestUtils._writeUsageLog();
            return this.writeUtils._createResponse(this.STATUS.BAD_REQUEST, `[DocuGenLLM.generateTableDocumentation]: ${e}`);
        }
    },

    generateMaintenanceSuggestions: function(recordSysId, tableName, recordDisplayValue) {
        this.REQUEST_TYPE = 'maintenance_suggestions';
        let responseArr = [];

        try {
            const scriptData = this.promptUtils._getScriptData(recordSysId, tableName);
            const changeData = this.promptUtils._getScriptChangeHistory(recordSysId, tableName);
            let existingDoc = this.promptUtils._getExistingDocumentation(recordSysId);
            const prompt = this.promptUtils._buildMaintenancePrompt(scriptData, changeData, existingDoc);
            const jsonFormattedPrompt = this.requestUtils._formatRequest(prompt);

            if (this.DEBUG) responseArr.push(jsonFormattedPrompt);

            this.requestUtils.REQUEST_TYPE = this.REQUEST_TYPE;
            const response = this.requestUtils._callLLMAPI(jsonFormattedPrompt);
            if (this.DEBUG) responseArr.push(response);

            const suggestions = this.requestUtils._parseLLMDocumentResponse(response);
            if (this.DEBUG) responseArr.push(suggestions);

            if (!existingDoc.sys_id) existingDoc = this.writeUtils._storeDocumentation(null, recordSysId, tableName, recordDisplayValue);

            const result = this.writeUtils._storeSuggestions(suggestions, recordSysId, tableName, recordDisplayValue, existingDoc.sys_id);
            if (this.DEBUG) responseArr.push(result);

            if (this.DEBUG) return this.writeUtils._createResponse(this.STATUS.DEBUG, responseArr);

            this.LOG_MESSAGE = JSON.stringify(response);
            this.requestUtils.LOG_MESSAGE = this.LOG_MESSAGE;
            this.requestUtils._writeUsageLog();
            return this.writeUtils._createResponse(this.STATUS.SUCCESS, result);
        } catch (e) {
            this.LOG_MESSAGE = `[DocuGenLLM.generateMaintenanceSuggestions] Error: ${e}`;
            this.requestUtils.LOG_MESSAGE = this.LOG_MESSAGE;
            this.requestUtils.REQUEST_TYPE = this.REQUEST_TYPE;
            this.requestUtils._writeUsageLog();
            return this.writeUtils._createResponse(this.STATUS.BAD_REQUEST, `[DocuGenLLM.generateMaintenanceSuggestions]: ${e}`);
        }
    },

    generateCodeReviewAnnotations: function(recordSysId, tableName, recordDisplayValue) {
        this.REQUEST_TYPE = 'code_review';
        let responseArr = [];

        try {
            const scriptData = this.promptUtils._getScriptData(recordSysId, tableName);
            const analysis = this.promptUtils._analyzeScript(scriptData.current.script || '', tableName);
            const prompt = this.promptUtils._buildCodeReviewPrompt(scriptData, analysis);
            const jsonFormattedPrompt = this.requestUtils._formatRequest(prompt);

            if (this.DEBUG) responseArr.push(jsonFormattedPrompt);

            this.requestUtils.REQUEST_TYPE = this.REQUEST_TYPE;
            const response = this.requestUtils._callLLMAPI(jsonFormattedPrompt);
            if (this.DEBUG) responseArr.push(response);

            const annotations = this.requestUtils._parseLLMDocumentResponse(response);
            if (this.DEBUG) responseArr.push(annotations);

            let existingDoc = this.promptUtils._getExistingDocumentation(recordSysId);
            if (!existingDoc.sys_id) existingDoc = this.writeUtils._storeDocumentation(null, recordSysId, tableName, recordDisplayValue);

            const result = this.writeUtils._storeCodeReviewAnnotations(annotations, analysis.metrics, recordSysId, tableName, recordDisplayValue, existingDoc.sys_id);
            if (this.DEBUG) responseArr.push(result);

            if (this.DEBUG) return this.writeUtils._createResponse(this.STATUS.DEBUG, responseArr);

            this.LOG_MESSAGE = JSON.stringify(response);
            this.requestUtils.LOG_MESSAGE = this.LOG_MESSAGE;
            this.requestUtils._writeUsageLog();
            return this.writeUtils._createResponse(this.STATUS.SUCCESS, result);
        } catch (e) {
            this.LOG_MESSAGE = `[DocuGenLLM.generateCodeReviewAnnotations] Error: ${e}`;
            this.requestUtils.LOG_MESSAGE = this.LOG_MESSAGE;
            this.requestUtils.REQUEST_TYPE = this.REQUEST_TYPE;
            this.requestUtils._writeUsageLog();
            return this.writeUtils._createResponse(this.STATUS.BAD_REQUEST, `[DocuGenLLM.generateCodeReviewAnnotations]: ${e}`);
        }
    },

    _simulateAPIDocumentationResponse: function(model) {
        let response;

        switch (model) {
            case "chatgpt":
                response = JSON.stringify([
                    {
                        "id": "msg_67b73f697ba4819183a15cc17d011509",
                        "type": "message",
                        "role": "assistant",
                        "content": [
                            {
                                "type": "output_text",
                                "text": "# Documentation for Client Script: Form Control\n\n## Purpose\nValidates JSON input and queries incidents.\n\n## Parameters\n- **g_form**: GlideForm API for form interactions.\n\n## Logic Flow\n- Retrieves input from u_prompt field.\n- Queries the incident table.\n- Logs findings if incidents exist.\n\n## Key Functionality\n- JSON validation\n- Incident querying\n\n## Dependencies\n- None\n\n## Integration Points\n- incident table\n- ServiceNow Platform (gs.log)\n\n## Potential Edge Cases\n- Missing null checks for g_form\n- Unhandled JSON parsing errors\n\n## Code Quality Metrics\n- **Cyclomatic Complexity**: 3 (due to if and try-catch)\n- **Maintainability Index**: 85 (good readability, moderate size)\n- **Technical Debt**: 1 hour (fix missing null checks)\n- **Code Smells**: Missing null checks for g_form"
                            }
                        ]
                    }
                ]);
                break;
            case "grok":
                response = JSON.stringify({
                    "id": "6dd0e908-dd7c-6ea7-67cb-31d841a5d3f2_us-east-1",
                    "object": "chat.completion",
                    "created": 1757715272,
                    "model": "grok-4-0709",
                    "choices": [{
                        "index": 0,
                        "message": {
                            "role": "assistant",
                            "content": "# Documentation for Client Script: Form Control\n\n## Purpose\nValidates JSON input and queries incidents.\n\n## Parameters\n- **g_form**: GlideForm API for form interactions.\n\n## Logic Flow\n- Retrieves input from u_prompt field.\n- Queries the incident table.\n- Logs findings if incidents exist.\n\n## Key Functionality\n- JSON validation\n- Incident querying\n\n## Dependencies\n- None\n\n## Integration Points\n- incident table\n- ServiceNow Platform (gs.log)\n\n## Potential Edge Cases\n- Missing null checks for g_form\n- Unhandled JSON parsing errors\n\n## Code Quality Metrics\n- **Cyclomatic Complexity**: 3 (due to if and try-catch)\n- **Maintainability Index**: 85 (good readability, moderate size)\n- **Technical Debt**: 1 hour (fix missing null checks)\n- **Code Smells**: Missing null checks for g_form",
                            "refusal": null
                        },
                        "finish_reason": "stop"
                    }],
                    "usage": {
                        "prompt_tokens": 897,
                        "completion_tokens": 703,
                        "total_tokens": 1949
                    }
                });
                break;
            case 'claude':
                response = JSON.stringify({
                    "id": "msg_01HCDu5LRGeP2o7s2xGmxyx8",
                    "type": "message",
                    "role": "assistant",
                    "content": [
                        {
                            "type": "text",
                            "text": "# Documentation for Client Script\n\n## Purpose\nValidates JSON input.\n\n## Parameters\n- **g_form**: GlideForm API.\n\n## Logic Flow\n- Get u_prompt value.\n- Parse JSON.\n\n## Key Functionality\n- JSON validation\n\n## Dependencies\n- None\n\n## Integration Points\n- ServiceNow Platform (g_form)\n\n## Potential Edge Cases\n- Invalid JSON input\n\n## Code Quality Metrics\n- **Cyclomatic Complexity**: 2 (simple control flow)\n- **Maintainability Index**: 90 (highly maintainable)\n- **Technical Debt**: 0.5 hours (minor fixes needed)\n- **Code Smells**: None"
                        }
                    ],
                    "model": "claude-sonnet-4-20250514",
                    "usage": {
                        "input_tokens": 21,
                        "output_tokens": 305
                    }
                });
                break;
        }

        return response;
    },

    type: 'DocuGenLLMClientUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-09-12 13:54:08</sys_created_on>
        <sys_id>b5441bbb83f7621046cfe4d0deaad3a4</sys_id>
        <sys_mod_count>277</sys_mod_count>
        <sys_name>DocuGenLLMClientUtils</sys_name>
        <sys_package display_value="DocuGenLLM" source="54a6cf7783b7621046cfe4d0deaad30f">54a6cf7783b7621046cfe4d0deaad30f</sys_package>
        <sys_policy/>
        <sys_scope display_value="DocuGenLLM">54a6cf7783b7621046cfe4d0deaad30f</sys_scope>
        <sys_update_name>sys_script_include_b5441bbb83f7621046cfe4d0deaad3a4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-10-21 00:12:50</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>b5441bbb83f7621046cfe4d0deaad3a4</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-09-12 13:54:07</sys_created_on>
        <sys_id>6c359bfb83f7621046cfe4d0deaad3ec</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-09-12 13:54:07</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
