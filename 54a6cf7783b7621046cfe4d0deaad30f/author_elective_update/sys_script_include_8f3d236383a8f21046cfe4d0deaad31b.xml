<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="DELETE">
        <access>package_private</access>
        <active>true</active>
        <api_name>global.DocuGenLLMPromptUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>DocuGenLLMPromptUtils</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var DocuGenLLMPromptUtils = Class.create();
DocuGenLLMPromptUtils.prototype = {
    initialize: function() {
    },

	_buildDocumentationPrompt: function(recordSysId, tableName) {
        try {
            let scriptAttributesObj = {};
            const recordGr = new GlideRecord(tableName);
            recordGr.get(recordSysId);

            for (key in recordGr) {
                if (!key.includes('sys_')) scriptAttributesObj[key] = recordGr[key].toString() || null;
            }

            const analysis = this._analyzeScript(scriptAttributesObj.script || '', tableName);

            const prompt = `Generate detailed documentation in markdown for the following ServiceNow ${recordGr.getTableName()} script. Include:
- **Purpose**: Describe the script's purpose and functionality.
- **Parameters**: List any parameters or inputs.
- **Logic Flow**: Explain the script's logic step-by-step.
- **Key Functionality**: Highlight critical features.
- **Dependencies**: List identified dependencies (e.g., Script Includes, APIs).
- **Integration Points**: Describe interactions with tables or platform APIs.
- **Potential Edge Cases**: Note potential issues like null checks or error handling.

Script Details:
\`\`\`json
${JSON.stringify(scriptAttributesObj)}
\`\`\`

Analysis Results:
\`\`\`json
${JSON.stringify(analysis)}
\`\`\`
`;

            return prompt;
        } catch (e) {
            gs.error(`[DocuGenLLM._buildDocumentationPrompt] Error: ${e}`);
            throw new Error(`[DocuGenLLM._buildDocumentationPrompt] Error: ${e}`);
        }
    },

    _buildTableDocumentationPrompt: function(recordSysId, tableName) {
        try {
            const tableUtil = new DocuGenTableSchemaUtil();
            const tableJson = tableUtil.getTableSchema(recordSysId);
			const analysis = this._analyzeTableUsage(tableName);

            return `You are an expert database designer that excels at data schema documentation. Generate detailed documentation in markdown for the ServiceNow table, ${tableName}. Include:
- **Purpose**: Describe the table's purpose and role in the system.
- **Parameters**: List key fields or configurations (e.g., reference fields, mandatory fields).
- **Table Structure**: Provide a detailed outline of the table's columns in a markdown table, noting name, label, type, reference (if applicable), max length, default value, and display column status. Use "null" for null values.
- **Key Functionality**: Highlight critical features or uses of the table.
- **Dependencies**: List dependencies (e.g., referenced tables, APIs).
- **Integration Points**: Describe interactions with other tables or platform APIs.
- **Potential Edge Cases**: Note potential issues (e.g., data validation, reference integrity).

Table Schema:
\`\`\`json
${JSON.stringify(tableJson)}
\`\`\`

Analysis Results:
\`\`\`json
${JSON.stringify(analysis)}
\`\`\`
`;
        } catch (e) {
            gs.error(`[DocuGenLLM._buildTableDocumentationPrompt] Error: ${e}`);
            throw new Error(`[DocuGenLLM._buildTableDocumentationPrompt] Error: ${e}`);
        }
    },

    _buildAnnotationPrompt: function(recordSysId, tableName) {
        try {
            let scriptAttributesObj = {};
            const recordGr = new GlideRecord(tableName);
            recordGr.get(recordSysId);

            for (key in recordGr) {
                if (/(^|\W)script($|\W)/i.test(key) || key === 'condition') scriptAttributesObj[key] = recordGr[key].toString();
            }

            return `As an expert JavaScript developer, generate JSDOC annotation for the following code in the JSON object. Only respond with the annotated code. Provide helpful commentary for future developers to understand how the code works. If there are multiple scripts, separate the scripts into code blocks with |||. Do not make them into variables in the same script, and do not add any code elements. Only comment on the code that is there. Do not provide any commentary or headers regarding the annotation.\n\n\`\`\`json\n${JSON.stringify(scriptAttributesObj)}\n\`\`\``;
        } catch (e) {
            gs.error(`[DocuGenLLM._buildAnnotationPrompt] Error: ${e}`);
            throw new Error(`[DocuGenLLM._buildAnnotationPrompt] Error: ${e}`);
        }
    },

    // New method to build prompt for maintenance suggestions
    _buildMaintenancePrompt: function(scriptData, changeData, existingDoc) {
        try {
            return `Analyze the following ServiceNow script changes and existing documentation to suggest updates to keep the documentation current. Provide suggestions in markdown format, including:
- **Suggested Documentation Updates**: Changes to the existing documentation to reflect script modifications.
- **Suggested Annotation Updates**: Updates to JSDOC or inline comments to align with code changes.
- **Rationale**: Explain why each suggestion is needed based on the changes.

If there is no existing documentation or no script available, along with your own documentation or annotation suggestions, suggest running DocuGenLLM Code Documentation to generate new documentation, or DocuGenLLM Code Annotation for code annotation via available UI actions.

Current Script:
\`\`\`json
${JSON.stringify(scriptData.current)}
\`\`\`

Previous Script (if available):
\`\`\`json
${JSON.stringify(scriptData.previous || {})}
\`\`\`

Change History:
\`\`\`json
${JSON.stringify(changeData)}
\`\`\`

Existing Documentation:
\`\`\`markdown
${existingDoc.documentation || 'No existing documentation'}
\`\`\`

Existing Annotations:
\`\`\`markdown
${existingDoc.annotations || 'No existing annotations'}
\`\`\`
`;
        } catch (e) {
            gs.error(`[DocuGenLLM._buildMaintenancePrompt] Error: ${e}`);
            throw new Error(`[DocuGenLLM._buildMaintenancePrompt] Error: ${e}`);
        }
    },

	_buildCodeReviewPrompt: function(scriptData, analysis) {
        try {
            return `As an expert ServiceNow developer, perform a code review for the following script. Generate detailed annotations in markdown, including:
- **Identified Issues**: Highlight potential issues (e.g., deprecated APIs, performance bottlenecks).
- **Best Practice Suggestions**: Recommend ServiceNow coding best practices (e.g., error handling, logging, ACL checks).
- **Remediation Steps**: Suggest specific changes to address each issue or implement best practices.
- **Code Context**: Provide inline comments in the script to mark issues or suggestions, using // for single-line comments.

Script Details:
\`\`\`json
${JSON.stringify(scriptData.current)}
\`\`\`

Analysis Results:
\`\`\`json
${JSON.stringify(analysis)}
\`\`\`
`;
        } catch (e) {
            gs.error(`[DocuGenLLM._buildCodeReviewPrompt] Error: ${e}`);
            throw new Error(`[DocuGenLLM._buildCodeReviewPrompt] Error: ${e}`);
        }
    },

    type: 'DocuGenLLMPromptUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-10-19 03:48:26</sys_created_on>
        <sys_id>8f3d236383a8f21046cfe4d0deaad31b</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>DocuGenLLMPromptUtils</sys_name>
        <sys_package display_value="DocuGenLLM" source="54a6cf7783b7621046cfe4d0deaad30f">54a6cf7783b7621046cfe4d0deaad30f</sys_package>
        <sys_policy/>
        <sys_scope display_value="DocuGenLLM">54a6cf7783b7621046cfe4d0deaad30f</sys_scope>
        <sys_update_name>sys_script_include_8f3d236383a8f21046cfe4d0deaad31b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-10-19 03:53:09</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="DELETE">
        <id>8f3d236383a8f21046cfe4d0deaad31b</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-10-19 03:48:25</sys_created_on>
        <sys_id>b46d236383a8f21046cfe4d0deaad32b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-10-19 03:48:25</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="DocuGenLLM">54a6cf7783b7621046cfe4d0deaad30f</application>
        <file_path/>
        <instance_id>ade9c8de1b9ab59039a54089bd4bcbdb</instance_id>
        <instance_name>dev205954</instance_name>
        <name>sys_script_include_8f3d236383a8f21046cfe4d0deaad31b</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;global.DocuGenLLMPromptUtils&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;mobile_callable&gt;false&lt;/mobile_callable&gt;&lt;name&gt;DocuGenLLMPromptUtils&lt;/name&gt;&lt;sandbox_callable&gt;false&lt;/sandbox_callable&gt;&lt;script&gt;&lt;![CDATA[var DocuGenLLMPromptUtils = Class.create();
DocuGenLLMPromptUtils.prototype = {
    initialize: function() {
    },

	_buildDocumentationPrompt: function(recordSysId, tableName) {
        try {
            let scriptAttributesObj = {};
            const recordGr = new GlideRecord(tableName);
            recordGr.get(recordSysId);

            for (key in recordGr) {
                if (!key.includes('sys_')) scriptAttributesObj[key] = recordGr[key].toString() || null;
            }

            const analysis = this._analyzeScript(scriptAttributesObj.script || '', tableName);

            const prompt = `Generate detailed documentation in markdown for the following ServiceNow ${recordGr.getTableName()} script. Include:
- **Purpose**: Describe the script's purpose and functionality.
- **Parameters**: List any parameters or inputs.
- **Logic Flow**: Explain the script's logic step-by-step.
- **Key Functionality**: Highlight critical features.
- **Dependencies**: List identified dependencies (e.g., Script Includes, APIs).
- **Integration Points**: Describe interactions with tables or platform APIs.
- **Potential Edge Cases**: Note potential issues like null checks or error handling.

Script Details:
\`\`\`json
${JSON.stringify(scriptAttributesObj)}
\`\`\`

Analysis Results:
\`\`\`json
${JSON.stringify(analysis)}
\`\`\`
`;

            return prompt;
        } catch (e) {
            gs.error(`[DocuGenLLM._buildDocumentationPrompt] Error: ${e}`);
            throw new Error(`[DocuGenLLM._buildDocumentationPrompt] Error: ${e}`);
        }
    },

    _buildTableDocumentationPrompt: function(recordSysId, tableName) {
        try {
            const tableUtil = new DocuGenTableSchemaUtil();
            const tableJson = tableUtil.getTableSchema(recordSysId);
			const analysis = this._analyzeTableUsage(tableName);

            return `You are an expert database designer that excels at data schema documentation. Generate detailed documentation in markdown for the ServiceNow table, ${tableName}. Include:
- **Purpose**: Describe the table's purpose and role in the system.
- **Parameters**: List key fields or configurations (e.g., reference fields, mandatory fields).
- **Table Structure**: Provide a detailed outline of the table's columns in a markdown table, noting name, label, type, reference (if applicable), max length, default value, and display column status. Use "null" for null values.
- **Key Functionality**: Highlight critical features or uses of the table.
- **Dependencies**: List dependencies (e.g., referenced tables, APIs).
- **Integration Points**: Describe interactions with other tables or platform APIs.
- **Potential Edge Cases**: Note potential issues (e.g., data validation, reference integrity).

Table Schema:
\`\`\`json
${JSON.stringify(tableJson)}
\`\`\`

Analysis Results:
\`\`\`json
${JSON.stringify(analysis)}
\`\`\`
`;
        } catch (e) {
            gs.error(`[DocuGenLLM._buildTableDocumentationPrompt] Error: ${e}`);
            throw new Error(`[DocuGenLLM._buildTableDocumentationPrompt] Error: ${e}`);
        }
    },

    _buildAnnotationPrompt: function(recordSysId, tableName) {
        try {
            let scriptAttributesObj = {};
            const recordGr = new GlideRecord(tableName);
            recordGr.get(recordSysId);

            for (key in recordGr) {
                if (/(^|\W)script($|\W)/i.test(key) || key === 'condition') scriptAttributesObj[key] = recordGr[key].toString();
            }

            return `As an expert JavaScript developer, generate JSDOC annotation for the following code in the JSON object. Only respond with the annotated code. Provide helpful commentary for future developers to understand how the code works. If there are multiple scripts, separate the scripts into code blocks with |||. Do not make them into variables in the same script, and do not add any code elements. Only comment on the code that is there. Do not provide any commentary or headers regarding the annotation.\n\n\`\`\`json\n${JSON.stringify(scriptAttributesObj)}\n\`\`\``;
        } catch (e) {
            gs.error(`[DocuGenLLM._buildAnnotationPrompt] Error: ${e}`);
            throw new Error(`[DocuGenLLM._buildAnnotationPrompt] Error: ${e}`);
        }
    },

    // New method to build prompt for maintenance suggestions
    _buildMaintenancePrompt: function(scriptData, changeData, existingDoc) {
        try {
            return `Analyze the following ServiceNow script changes and existing documentation to suggest updates to keep the documentation current. Provide suggestions in markdown format, including:
- **Suggested Documentation Updates**: Changes to the existing documentation to reflect script modifications.
- **Suggested Annotation Updates**: Updates to JSDOC or inline comments to align with code changes.
- **Rationale**: Explain why each suggestion is needed based on the changes.

If there is no existing documentation or no script available, along with your own documentation or annotation suggestions, suggest running DocuGenLLM Code Documentation to generate new documentation, or DocuGenLLM Code Annotation for code annotation via available UI actions.

Current Script:
\`\`\`json
${JSON.stringify(scriptData.current)}
\`\`\`

Previous Script (if available):
\`\`\`json
${JSON.stringify(scriptData.previous || {})}
\`\`\`

Change History:
\`\`\`json
${JSON.stringify(changeData)}
\`\`\`

Existing Documentation:
\`\`\`markdown
${existingDoc.documentation || 'No existing documentation'}
\`\`\`

Existing Annotations:
\`\`\`markdown
${existingDoc.annotations || 'No existing annotations'}
\`\`\`
`;
        } catch (e) {
            gs.error(`[DocuGenLLM._buildMaintenancePrompt] Error: ${e}`);
            throw new Error(`[DocuGenLLM._buildMaintenancePrompt] Error: ${e}`);
        }
    },

	_buildCodeReviewPrompt: function(scriptData, analysis) {
        try {
            return `As an expert ServiceNow developer, perform a code review for the following script. Generate detailed annotations in markdown, including:
- **Identified Issues**: Highlight potential issues (e.g., deprecated APIs, performance bottlenecks).
- **Best Practice Suggestions**: Recommend ServiceNow coding best practices (e.g., error handling, logging, ACL checks).
- **Remediation Steps**: Suggest specific changes to address each issue or implement best practices.
- **Code Context**: Provide inline comments in the script to mark issues or suggestions, using // for single-line comments.

Script Details:
\`\`\`json
${JSON.stringify(scriptData.current)}
\`\`\`

Analysis Results:
\`\`\`json
${JSON.stringify(analysis)}
\`\`\`
`;
        } catch (e) {
            gs.error(`[DocuGenLLM._buildCodeReviewPrompt] Error: ${e}`);
            throw new Error(`[DocuGenLLM._buildCodeReviewPrompt] Error: ${e}`);
        }
    },

    type: 'DocuGenLLMPromptUtils'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-10-19 03:48:26&lt;/sys_created_on&gt;&lt;sys_id&gt;8f3d236383a8f21046cfe4d0deaad31b&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;DocuGenLLMPromptUtils&lt;/sys_name&gt;&lt;sys_package display_value="DocuGenLLM" source="54a6cf7783b7621046cfe4d0deaad30f"&gt;54a6cf7783b7621046cfe4d0deaad30f&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="DocuGenLLM"&gt;54a6cf7783b7621046cfe4d0deaad30f&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_8f3d236383a8f21046cfe4d0deaad31b&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-10-19 03:53:09&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;8f3d236383a8f21046cfe4d0deaad31b&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-10-19 03:48:25&lt;/sys_created_on&gt;&lt;sys_id&gt;b46d236383a8f21046cfe4d0deaad32b&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-10-19 03:48:25&lt;/sys_updated_on&gt;&lt;table&gt;sys_script_include&lt;/table&gt;&lt;use_es_latest&gt;true&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
        <payload_hash>397805619</payload_hash>
        <record_name>DocuGenLLMPromptUtils</record_name>
        <reverted_from/>
        <source>2b2cd0ff83f7221046cfe4d0deaad3ea</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-10-19 03:53:10</sys_created_on>
        <sys_id>c67e6fe383a8f21046cfe4d0deaad348</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>199fa9988cd0000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-10-19 03:53:10</sys_updated_on>
        <type>Script Include</type>
        <update_guid>067e6fe338a8f210ac5488f214149047</update_guid>
        <update_guid_history>067e6fe338a8f210ac5488f214149047:397805619,3c6d6feba168f21072f01d427ed0c461:-158123111</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-10-21 00:28:20</sys_created_on>
        <sys_db_object display_value="" name="sys_script_include">sys_script_include</sys_db_object>
        <sys_id>b5f676efc1eb459e86f440851696c889</sys_id>
        <sys_metadata>8f3d236383a8f21046cfe4d0deaad31b</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DocuGenLLMPromptUtils</sys_name>
        <sys_package display_value="DocuGenLLM" source="54a6cf7783b7621046cfe4d0deaad30f">54a6cf7783b7621046cfe4d0deaad30f</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="DocuGenLLM">54a6cf7783b7621046cfe4d0deaad30f</sys_scope>
        <sys_scope_delete display_value="">3e20a1fad56d4d1b9f340083711ad731</sys_scope_delete>
        <sys_update_name>sys_script_include_8f3d236383a8f21046cfe4d0deaad31b</sys_update_name>
        <sys_update_version display_value="sys_script_include_8f3d236383a8f21046cfe4d0deaad31b">c67e6fe383a8f21046cfe4d0deaad348</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-10-21 00:28:20</sys_updated_on>
    </sys_metadata_delete>
</record_update>
